package ww.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ww.greendao.dao.pf_group;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PF_GROUP.
*/
public class pf_groupDao extends AbstractDao<pf_group, Long> {

    public static final String TABLENAME = "PF_GROUP";

    /**
     * Properties of entity pf_group.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Group_ID = new Property(0, Long.class, "group_ID", true, "GROUP__ID");
        public final static Property Group_CHN_content = new Property(1, String.class, "group_CHN_content", false, "GROUP__CHN_CONTENT");
        public final static Property Group_ENG_content = new Property(2, String.class, "group_ENG_content", false, "GROUP__ENG_CONTENT");
        public final static Property Group_description = new Property(3, String.class, "group_description", false, "GROUP_DESCRIPTION");
    };


    public pf_groupDao(DaoConfig config) {
        super(config);
    }
    
    public pf_groupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PF_GROUP' (" + //
                "'GROUP__ID' INTEGER PRIMARY KEY UNIQUE ," + // 0: group_ID
                "'GROUP__CHN_CONTENT' TEXT," + // 1: group_CHN_content
                "'GROUP__ENG_CONTENT' TEXT," + // 2: group_ENG_content
                "'GROUP_DESCRIPTION' TEXT);"); // 3: group_description
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PF_GROUP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, pf_group entity) {
        stmt.clearBindings();
 
        Long group_ID = entity.getGroup_ID();
        if (group_ID != null) {
            stmt.bindLong(1, group_ID);
        }
 
        String group_CHN_content = entity.getGroup_CHN_content();
        if (group_CHN_content != null) {
            stmt.bindString(2, group_CHN_content);
        }
 
        String group_ENG_content = entity.getGroup_ENG_content();
        if (group_ENG_content != null) {
            stmt.bindString(3, group_ENG_content);
        }
 
        String group_description = entity.getGroup_description();
        if (group_description != null) {
            stmt.bindString(4, group_description);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public pf_group readEntity(Cursor cursor, int offset) {
        pf_group entity = new pf_group( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // group_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // group_CHN_content
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // group_ENG_content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // group_description
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, pf_group entity, int offset) {
        entity.setGroup_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroup_CHN_content(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroup_ENG_content(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroup_description(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(pf_group entity, long rowId) {
        entity.setGroup_ID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(pf_group entity) {
        if(entity != null) {
            return entity.getGroup_ID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
