package ww.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ww.greendao.dao.pf_athlete;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PF_ATHLETE.
*/
public class pf_athleteDao extends AbstractDao<pf_athlete, Long> {

    public static final String TABLENAME = "PF_ATHLETE";

    /**
     * Properties of entity pf_athlete.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property Athlete_ID = new Property(1, String.class, "athlete_ID", false, "ATHLETE__ID");
        public final static Property Athlete_order = new Property(2, Integer.class, "athlete_order", false, "ATHLETE_ORDER");
        public final static Property Athlete_name = new Property(3, String.class, "athlete_name", false, "ATHLETE_NAME");
        public final static Property Athlete_group = new Property(4, String.class, "athlete_group", false, "ATHLETE_GROUP");
    };


    public pf_athleteDao(DaoConfig config) {
        super(config);
    }
    
    public pf_athleteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PF_ATHLETE' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "'ATHLETE__ID' TEXT UNIQUE ," + // 1: athlete_ID
                "'ATHLETE_ORDER' INTEGER," + // 2: athlete_order
                "'ATHLETE_NAME' TEXT," + // 3: athlete_name
                "'ATHLETE_GROUP' TEXT);"); // 4: athlete_group
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PF_ATHLETE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, pf_athlete entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String athlete_ID = entity.getAthlete_ID();
        if (athlete_ID != null) {
            stmt.bindString(2, athlete_ID);
        }
 
        Integer athlete_order = entity.getAthlete_order();
        if (athlete_order != null) {
            stmt.bindLong(3, athlete_order);
        }
 
        String athlete_name = entity.getAthlete_name();
        if (athlete_name != null) {
            stmt.bindString(4, athlete_name);
        }
 
        String athlete_group = entity.getAthlete_group();
        if (athlete_group != null) {
            stmt.bindString(5, athlete_group);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public pf_athlete readEntity(Cursor cursor, int offset) {
        pf_athlete entity = new pf_athlete( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // athlete_ID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // athlete_order
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // athlete_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // athlete_group
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, pf_athlete entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAthlete_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAthlete_order(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setAthlete_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAthlete_group(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(pf_athlete entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(pf_athlete entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
