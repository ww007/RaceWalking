package ww.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ww.greendao.dao.dl_referee;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DL_REFEREE.
*/
public class dl_refereeDao extends AbstractDao<dl_referee, Long> {

    public static final String TABLENAME = "DL_REFEREE";

    /**
     * Properties of entity dl_referee.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Referee_ID = new Property(0, Long.class, "referee_ID", true, "REFEREE__ID");
        public final static Property Referee_CHN_name = new Property(1, String.class, "referee_CHN_name", false, "REFEREE__CHN_NAME");
        public final static Property Referee_ENG_name = new Property(2, String.class, "referee_ENG_name", false, "REFEREE__ENG_NAME");
        public final static Property Referee_CHN_country = new Property(3, String.class, "referee_CHN_country", false, "REFEREE__CHN_COUNTRY");
        public final static Property Referee_ENG_country = new Property(4, String.class, "referee_ENG_country", false, "REFEREE__ENG_COUNTRY");
        public final static Property Referee_num = new Property(5, String.class, "referee_num", false, "REFEREE_NUM");
        public final static Property Referee_level = new Property(6, Integer.class, "referee_level", false, "REFEREE_LEVEL");
        public final static Property Referee_type = new Property(7, Integer.class, "referee_type", false, "REFEREE_TYPE");
        public final static Property Referee_position = new Property(8, String.class, "referee_position", false, "REFEREE_POSITION");
        public final static Property Referee_password = new Property(9, String.class, "referee_password", false, "REFEREE_PASSWORD");
        public final static Property Referee_gmid = new Property(10, String.class, "referee_gmid", false, "REFEREE_GMID");
        public final static Property Referee_state = new Property(11, String.class, "referee_state", false, "REFEREE_STATE");
    };


    public dl_refereeDao(DaoConfig config) {
        super(config);
    }
    
    public dl_refereeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DL_REFEREE' (" + //
                "'REFEREE__ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: referee_ID
                "'REFEREE__CHN_NAME' TEXT UNIQUE ," + // 1: referee_CHN_name
                "'REFEREE__ENG_NAME' TEXT," + // 2: referee_ENG_name
                "'REFEREE__CHN_COUNTRY' TEXT," + // 3: referee_CHN_country
                "'REFEREE__ENG_COUNTRY' TEXT," + // 4: referee_ENG_country
                "'REFEREE_NUM' TEXT," + // 5: referee_num
                "'REFEREE_LEVEL' INTEGER," + // 6: referee_level
                "'REFEREE_TYPE' INTEGER," + // 7: referee_type
                "'REFEREE_POSITION' TEXT," + // 8: referee_position
                "'REFEREE_PASSWORD' TEXT," + // 9: referee_password
                "'REFEREE_GMID' TEXT," + // 10: referee_gmid
                "'REFEREE_STATE' TEXT);"); // 11: referee_state
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DL_REFEREE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, dl_referee entity) {
        stmt.clearBindings();
 
        Long referee_ID = entity.getReferee_ID();
        if (referee_ID != null) {
            stmt.bindLong(1, referee_ID);
        }
 
        String referee_CHN_name = entity.getReferee_CHN_name();
        if (referee_CHN_name != null) {
            stmt.bindString(2, referee_CHN_name);
        }
 
        String referee_ENG_name = entity.getReferee_ENG_name();
        if (referee_ENG_name != null) {
            stmt.bindString(3, referee_ENG_name);
        }
 
        String referee_CHN_country = entity.getReferee_CHN_country();
        if (referee_CHN_country != null) {
            stmt.bindString(4, referee_CHN_country);
        }
 
        String referee_ENG_country = entity.getReferee_ENG_country();
        if (referee_ENG_country != null) {
            stmt.bindString(5, referee_ENG_country);
        }
 
        String referee_num = entity.getReferee_num();
        if (referee_num != null) {
            stmt.bindString(6, referee_num);
        }
 
        Integer referee_level = entity.getReferee_level();
        if (referee_level != null) {
            stmt.bindLong(7, referee_level);
        }
 
        Integer referee_type = entity.getReferee_type();
        if (referee_type != null) {
            stmt.bindLong(8, referee_type);
        }
 
        String referee_position = entity.getReferee_position();
        if (referee_position != null) {
            stmt.bindString(9, referee_position);
        }
 
        String referee_password = entity.getReferee_password();
        if (referee_password != null) {
            stmt.bindString(10, referee_password);
        }
 
        String referee_gmid = entity.getReferee_gmid();
        if (referee_gmid != null) {
            stmt.bindString(11, referee_gmid);
        }
 
        String referee_state = entity.getReferee_state();
        if (referee_state != null) {
            stmt.bindString(12, referee_state);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public dl_referee readEntity(Cursor cursor, int offset) {
        dl_referee entity = new dl_referee( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // referee_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // referee_CHN_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // referee_ENG_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // referee_CHN_country
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // referee_ENG_country
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // referee_num
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // referee_level
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // referee_type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // referee_position
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // referee_password
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // referee_gmid
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // referee_state
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, dl_referee entity, int offset) {
        entity.setReferee_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setReferee_CHN_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReferee_ENG_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReferee_CHN_country(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReferee_ENG_country(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReferee_num(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReferee_level(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setReferee_type(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setReferee_position(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReferee_password(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setReferee_gmid(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setReferee_state(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(dl_referee entity, long rowId) {
        entity.setReferee_ID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(dl_referee entity) {
        if(entity != null) {
            return entity.getReferee_ID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
